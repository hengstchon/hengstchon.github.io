{"componentChunkName":"component---src-templates-blog-post-js","path":"/npm-and-npx/","webpackCompilationHash":"166d21197ca90ed03ae9","result":{"data":{"site":{"siteMetadata":{"title":"写点东西","author":"hengstchon"}},"markdownRemark":{"id":"44075386-9454-5207-941d-20a2dcbf558c","excerpt":"npm 与 npx 区别 npm 可以 local 或 global 安装一个包，local 时可执行文件在  文件夹中，global 时可执行文件在  中。但是如果 local 安装，我们并不能直接使用这个包，因为全局 path 中并没有它的可执行文件。在 npx…","html":"<h3>npm 与 npx 区别</h3>\n<p>npm 可以 local 或 global 安装一个包，local 时可执行文件在 <code class=\"language-text\">./node_modules/.bin/</code> 文件夹中，global 时可执行文件在 <code class=\"language-text\">/usr/local/bin</code> 中。但是如果 local 安装，我们并不能直接使用这个包，因为全局 path 中并没有它的可执行文件。在 npx 出现前，可以通过 <code class=\"language-text\">./node_modules/.bin/some-package</code> 或将 <code class=\"language-text\">&quot;some-package&quot;: &quot;some-package&quot;</code> 写到 <code class=\"language-text\">packages.json</code> 的 <code class=\"language-text\">&quot;scripts&quot;</code> 中，然后 <code class=\"language-text\">npm run some-package</code> 来执行。而 npx 的出现恰好解决了这个问题。</p>\n<p>根据 <a href=\"https://www.npmjs.com/package/npx\">npx 官网</a>描述，npx 会先检查 <code class=\"language-text\">$PATH</code>，没有再检查 local <code class=\"language-text\">node_modules/.bin</code>，再没有就临时安装再执行命令，不会污染全局环境。</p>\n<p>npx 适用场景：</p>\n<ul>\n<li>Running a project-local bin</li>\n<li>One-off invocation without local installation</li>\n<li>Invoking a gist script or a command from a github repository or</li>\n<li>Specify a different version of an npm module</li>\n</ul>\n<p>因为一般在一个 project 中，<code class=\"language-text\">create-react-app</code> 这个包只会在创建工程时使用一次，所以现在我们知道为什么在官网中推荐用 <code class=\"language-text\">npx create-react-app my-app</code> 来创建而不是其他方式了。</p>","frontmatter":{"title":"npm 与 npx 区别","date":"July 03, 2019"},"fields":{"slug":"/npm-and-npx/"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/npm-and-npx/","previous":{"fields":{"slug":"/咪咪和嘎嘎/咪咪和嘎嘎/"},"frontmatter":{"title":"咪咪和嘎嘎"}},"next":null}}}